;; Copyright [2021] [virtual earth Gesellschaft für Wissens re/prä sentation mbH]

;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at

;; http://www.apache.org/licenses/LICENSE-2.0

;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

{:objects
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; objects for included dict-type data
 {:flags
  {:description "Various flags"
   :fields {:marked_for_not_publication {:type Boolean}
            :marked_for_legal {:type Boolean}
            :marked_archived_only {:type Boolean}
            :marked_for_sms {:type Boolean}}}

  :poi
  {:description "Point of Interest on a picture.
param x:	horizontal offset
param y:	vertical offset"
   :fields {:x {:type Int}
            :y {:type Int}}}

  :genre
  {:description "Value from genre controlled vocabulary."
   :fields {:qcode {:type ID
                    :description "Genre identifier"}
            :name {:type String
                   :description "Genra display name."}}}
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; main objects

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; author object, actually inside Superdesk this is the user
  :author
  {:description "Superdesk author."
   :fields {:_id {:type ID}
            :first_name {:type String}
            :last_name {:type String}
            :display_name {:type String}
            :byline {:type String}
            :sign_off {:type String}
            :email {:type String}
            :job_title {:type String}
            :is_author {:type Boolean}
            :desk {:type String}
            }}

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; item, the main "anything" content item. Pages, Pictures, what-have-you
  :item
  {:description "Superdesk Item."
   :enums {:itemtype
           {:values [:text :composite :picture :audio :video]
            :description "Item type. One of text|composite|picture|audio|video."}}
   :fields {;; identifiers
            :guid {:type (non-null ID)
                   :description "Globally unique id. Using external id for ingested content."}
            :unique_id {:type (non-null ID)
                        :description "Internally unique id."}
            :unique_name {:type (non-null String)
                          :description "Internally unique name. By default same as unique_id."}
            :family_id {:type String
                        :description "Id for all items derived from single item via fetch or copy actions. For ingested items equals to ingest_id."}
            :related_to {:type String
                         :description "Original item id when doing associate metadata action."}
            ;; content metadata
            :headline {:type String}
            :slugline {:type String}
            :byline {:type String}
            :abstract {:type String
                       :description "Perex or lead."}
            :keywords {:type (list String)
                       :description "List of keywords."}
            :word_count {:type Int
                         :description "Wordcount in body_html field."}
            :priority {:type Int}
            :urgency {:type Int}
            :description_text {:type String
                               :description "Text description of the item. Used for media types."}
            :body_html {:type String}
            :body_text {:type String
                        :description "Text content of the item. Used for preformatted text."}
            :body_footer {:type String
                          :description "Content footer, used for additional information."}
            ;; :dateline {:type FIXME-String
            ;;            :description "Info about when/where story was written."
            ;; :groups {:type FIXME-dict
            ;;          :description "Package contents in NewsML like format."}
            :media {:type String
                    :description "Binary file reference for media type items."}
            :mediatype {:type String
                        :description "Binary file mime type."}
            :poi {:type poi
                  :description "Point of Interest on a picture.
param x:	horizontal offset
param y:	vertical offset"}
            ;; :renditions {:type (list rendition)
            ;;              :description "Renditions of a media type item:

            ;;     'renditions': {
            ;;         'original': {
            ;;             'href': '...',
            ;;             'width': 1280,
            ;;             'height': 800,
            ;;         },
            ;;         ...
            ;;     }

            ;; "}
            :filemeta_json {:type String
                            :description "JSON encoded filemeta. Avoids storage issues."}
            ;;             :associations {:type FIXME-dict
            ;;                            :description "

            ;;     Embedded items within body text or predefined relations:

            ;;     'associations': {
            ;;         'featured_image': {
            ;;             'type': 'picture',
            ;;             'guid': 'urn:localhost:123',
            ;;             ...
            ;;         }
            ;;     }thx!

            ;; "}
            :alt_text {:type String
                       :description "Alternate text for picture type items."}
            :sms_message {:type String
                          :description "Short summary of an item, can be used for sms/twitter subscribers."}
            ;; item metadata
            :type {:type String
                   :description "Item type. One of text|composite|picture|audio|video."}
            :language {:type String
                       :description "Item language code."}
            :anpa_take_key {:type String}
            :profile {:type String
                      :description "Content profile id"}
            :state {:type String
                    :description "Workflow state.

ContentStates = <class 'superdesk.metadata.item.ContentStates'>
    ContentStates(DRAFT, INGESTED, ROUTED, FETCHED, SUBMITTED, PROGRESS, SPIKED, PUBLISHED, KILLED, CORRECTED, SCHEDULED, RECALLED, UNPUBLISHED, CORRECTION, BEING_CORRECTED)"}
            :revert_state {:type String
                           :description "Previous item state, is updated on every state change."}
            :pubstatus {:type String
                        :description " Publication state.
    PubStatuses = <class 'superdesk.metadata.item.PubStatuses'>
        PubStatuses(USABLE, HOLD, CANCELED)"}
            :signal {:type String
                     :description "Signal information sent to subscriber."} 
            :ednote {:type String
                     :description "Editorial comment."}
            :flags {:type flags
                    :description "Various flags."}
            :expiry {:type String ; really a datetime
                     :description "When this item will expire. It updates on every save/send action."}
            ;; Copyright information
            :usageterm {:type String}
            :copyrightnotice {:type String}
            :copyrightholder {:type String}
            :creditline {:type String}
            ;; CVs - These attributes are populated using values from controlled vocabularies.
            :anpa_category {:type (list String)
                            :description "Values from category cv."}
            :subject {:type (list String)
                      :description "Values from IPTC subjectcodes plus from custom cvs."}
            :genre {:type (list genre)
                    :description "Values from genre cv."}
            :company_codes {:type (list String)
                            :description "Values from company codes cv."}
            :place {:type (list String)
                    :description "Place where story happened."}
            ;; System - Set/updated by system mostly.
            :_current_version {:type Int
                               :description "Version of an item, gets incremented on save or publish."}
            :version {:type Int
                      :description "Set by client - used to create items with version 0 which are used as drafts."}
            :firstcreated {:type String
                           :description "When the item was created."}
            :versioncreated {:type String
                             :description "When current version was created."}
            :original_creator {:type ID
                               :description "User who created/fetched item."}
            :version_creator {:type ID
                              :description "User who created the current version."}
            :lock_user {:type ID
                        :description "User who has current lock on this item."}
            :lock_time {:type String
                        :description "When was the item locked?"}
            :lock_session {:type ID
                           :description "Session id where item was locked. This way it can detect items locked by same user but in different sessions."}
            :template {:type ID
                       :description "Template id if item was created using a template."}
            :published_in_package {:type ID
                                   :description "If item was published as part of a package for the first time this will be set to package id." }
            ;; Ingest - Set on ingest, might be empty for items created in house.

            :ingest_id
            {:type String
             :description "Ingest item id from which item was fetched. For ingested items same as family_id."}
            :ingest_provider
            { :type ID
             :description "Ingest provider id."}
            :source
            {:type String
             :description "Ingest provider source value. Using DEFAULT_SOURCE_VALUE_FOR_MANUAL_ARTICLES config for items created locally."}
            :original_source
            { :type String
             :description "Source value from ingested item." }
            :ingest_provider_sequence
            { :type Int
             :description "Counter for ingest items." }

            
            }}}
 :queries
 {:item_by_guid
  {:type :item
   :description "Access Superdesk item by GUID"
   :args {:guid {:type ID}}
   :resolve :query/item-by-guid}
  :user_by_id
  {:type :author
   :description "Access Superdesk author by ID"
   :args {:_id {:type ID}}
   :resolve :query/user-by-id}}}
